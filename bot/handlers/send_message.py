import telegram
from telegram import Update, ForceReply, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, filters

GET_MESSAGE, CONFIRMATION = range(2)
reply_keyboard = [['–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –ê–∫–∞–¥–µ–º—ñ—ó', '–°–∏—Å—Ç–µ–º–∞ –≤—Å—Ç—É–ø—É'],
                  ['–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è', '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å'],
                  ['–ö–æ–Ω—Ç–∞–∫—Ç–∏', '–ì—É—Ä—Ç–æ–∂–∏—Ç–∫–∏'],
                  ['–ß–∞—Ç-–ø—ñ–¥—Ç—Ä–∏–º–∫–∞', '–•–æ—á—É –ø—Ä–∏–∫–æ–ª—é—Ö—É üòú']]
keyboard_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)


async def start_broadcast(update: Update, context: CallbackContext) -> int:
    if update.effective_user.username in ['zhenyettta', 'malashokk']:
        await update.message.reply_text('–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:', reply_markup=ForceReply(selective=True))
        return GET_MESSAGE
    else:
        await update.message.reply_text('–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
        return ConversationHandler.END


async def get_message(update: Update, context: CallbackContext) -> int:
    context.user_data['message'] = update.message.text
    await update.message.reply_text('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º? (—Ç–∞–∫/–Ω—ñ)')
    return CONFIRMATION


async def send_broadcast(update: Update, context: CallbackContext) -> int:
    answer = update.message.text.lower()
    if answer == '—Ç–∞–∫':
        message = context.user_data['message']
        chat_ids = read_chat_ids('usernames.txt')
        success_count = 0
        fail_count = 0
        for chat_id in chat_ids:
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
                success_count += 1
            except telegram.error.Forbidden:
                fail_count += 1
                print(f"Failed to send message to {chat_id}: bot was blocked by the user")
            except Exception as e:
                fail_count += 1
                print(f"Failed to send message to {chat_id}: {e}")

        await update.message.reply_text(f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. '
                                        f'–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ {fail_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.', reply_markup=keyboard_markup)
    else:
        await update.message.reply_text('–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.', reply_markup=keyboard_markup)
    return ConversationHandler.END


def read_chat_ids(filename):
    chat_ids = []
    with open(filename, 'r', encoding='utf-8') as file:
        for line in file:
            chat_id = line.split(',')[0].strip()
            if chat_id.isdigit():
                chat_ids.append(chat_id)
            else:
                print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ–≤—ñ—Ä–Ω–∏–π chat_id –≤–∏—è–≤–ª–µ–Ω–æ ({chat_id}), —è–∫–∏–π –±—É–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π.")
    return chat_ids


broadcast_handler = ConversationHandler(
    entry_points=[CommandHandler('broadcast', start_broadcast)],
    states={
        GET_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
        CONFIRMATION: [MessageHandler(filters.Regex('^(—Ç–∞–∫|–Ω—ñ)$'), send_broadcast)]
    },
    fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text(
        '–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.') & ConversationHandler.END)]
)
